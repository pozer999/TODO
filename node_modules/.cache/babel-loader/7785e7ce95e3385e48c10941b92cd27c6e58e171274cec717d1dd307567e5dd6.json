{"ast":null,"code":"var _jsxFileName = \"/home/pozer/react/TODO/todo/src/widgets/TodoList/ui/TodoList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DownOutlined } from '@ant-design/icons';\nimport { Space, Table } from 'antd';\n\n// interface DataType {\n//             gender: string;\n//             name: {\n//               title: string;\n//               first: string;\n//               last: string;\n//             };\n//             email: string;\n//             picture: {\n//               large: string;\n//               medium: string;\n//               thumbnail: string;\n//             };\n//             nat: string;\n//           }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name'\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  sorter: (a, b) => a.age - b.age\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  filters: [{\n    text: 'London',\n    value: 'London'\n  }, {\n    text: 'New York',\n    value: 'New York'\n  }],\n  onFilter: (value, record) => record.address.indexOf(value) === 0\n}, {\n  title: 'Action',\n  key: 'action',\n  sorter: true,\n  render: () => /*#__PURE__*/_jsxDEV(Space, {\n    size: \"middle\",\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      children: /*#__PURE__*/_jsxDEV(Space, {\n        children: [\"More actions\", /*#__PURE__*/_jsxDEV(DownOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 13\n  }, this)\n}];\nconst data = [];\nfor (let i = 1; i <= 10; i++) {\n  data.push({\n    key: i,\n    name: 'John Brown',\n    age: Number(`${i}2`),\n    address: `New York No. ${i} Lake Park`,\n    description: `My name is John Brown, I am ${i}2 years old, living in New York No. ${i} Lake Park.`\n  });\n}\nconst defaultExpandable = {\n  expandedRowRender: record => /*#__PURE__*/_jsxDEV(\"p\", {\n    children: record.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 76\n  }, this)\n};\nconst defaultTitle = () => 'Here is title';\nconst defaultFooter = () => 'Here is footer';\nconst TodoList = () => {\n  _s();\n  const [bordered, setBordered] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [size, setSize] = useState('large');\n  const [expandable, setExpandable] = useState(defaultExpandable);\n  const [showTitle, setShowTitle] = useState(false);\n  const [showHeader, setShowHeader] = useState(true);\n  const [showfooter, setShowFooter] = useState(true);\n  const [rowSelection, setRowSelection] = useState({});\n  const [hasData, setHasData] = useState(true);\n  const [tableLayout, setTableLayout] = useState();\n  const [top, setTop] = useState('none');\n  const [bottom, setBottom] = useState('bottomRight');\n  const [ellipsis, setEllipsis] = useState(false);\n  const [yScroll, setYScroll] = useState(false);\n  const [xScroll, setXScroll] = useState();\n  const scroll = {};\n  if (yScroll) {\n    scroll.y = 240;\n  }\n  if (xScroll) {\n    scroll.x = '100vw';\n  }\n  const tableColumns = columns.map(item => ({\n    ...item,\n    ellipsis\n  }));\n  if (xScroll === 'fixed') {\n    tableColumns[0].fixed = true;\n    tableColumns[tableColumns.length - 1].fixed = 'right';\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      bordered: true,\n      loading: true,\n      size: \"middle\",\n      showHeader: true,\n      pagination: {\n        position: [top, bottom]\n      },\n      columns: tableColumns,\n      dataSource: hasData ? data : [],\n      scroll: scroll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n//     const [loading, setLoading] = useState(false);\n//     const [data, setData] = useState<DataType[]>([]);\n\n//     const loadMoreData = () => {\n//       if (loading) {\n//         return;\n//       }\n//       setLoading(true);\n//       fetch('https://randomuser.me/api/?results=10&inc=name,gender,email,nat,picture&noinfo')\n//         .then((res) => res.json())\n//         .then((body) => {\n//           setData([...data, ...body.results]);\n//           setLoading(false);\n//         })\n//         .catch(() => {\n//           setLoading(false);\n//         });\n//     };\n\n//     useEffect(() => {\n//       loadMoreData();\n//     }, []);\n\n//     return (\n//       <div\n//         id=\"scrollableDiv\"\n//         style={{\n//           height: 400,\n//           overflow: 'auto',\n//           padding: '0 16px',\n//           border: '1px solid rgba(140, 140, 140, 0.35)',\n//         }}\n//       >\n//         <InfiniteScroll\n//           dataLength={data.length}\n//           next={loadMoreData}\n//           hasMore={data.length < 50}\n//           loader={<Skeleton avatar paragraph={{ rows: 1 }} active />}\n//           endMessage={<Divider plain>It is all, nothing more ü§ê</Divider>}\n//           scrollableTarget=\"scrollableDiv\"\n//         >\n//           <List\n//             dataSource={data}\n//             renderItem={(item) => (\n//               <List.Item key={item.email}>\n//                 <List.Item.Meta\n//                   avatar={<Avatar src={item.picture.large} />}\n//                   title={<a href=\"https://ant.design\">{item.name.last}</a>}\n//                   description={item.email}\n//                 />\n//                 <div>Content</div>\n//               </List.Item>\n//             )}\n//           />\n//         </InfiniteScroll>\n//       </div>\n//     );\n//   };\n_s(TodoList, \"VQwjOuOG19j9ZSQWeEUcs91pHIU=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","DownOutlined","Space","Table","jsxDEV","_jsxDEV","Fragment","_Fragment","columns","title","dataIndex","sorter","a","b","age","filters","text","value","onFilter","record","address","indexOf","key","render","size","children","fileName","_jsxFileName","lineNumber","columnNumber","data","i","push","name","Number","description","defaultExpandable","expandedRowRender","defaultTitle","defaultFooter","TodoList","_s","bordered","setBordered","loading","setLoading","setSize","expandable","setExpandable","showTitle","setShowTitle","showHeader","setShowHeader","showfooter","setShowFooter","rowSelection","setRowSelection","hasData","setHasData","tableLayout","setTableLayout","top","setTop","bottom","setBottom","ellipsis","setEllipsis","yScroll","setYScroll","xScroll","setXScroll","scroll","y","x","tableColumns","map","item","fixed","length","pagination","position","dataSource","_c","$RefreshReg$"],"sources":["/home/pozer/react/TODO/todo/src/widgets/TodoList/ui/TodoList.tsx"],"sourcesContent":["import { Avatar, Divider, List, Skeleton } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { DownOutlined } from '@ant-design/icons';\nimport type { RadioChangeEvent } from 'antd';\nimport { Form, Radio, Space, Switch, Table } from 'antd';\nimport type { SizeType } from 'antd/es/config-provider/SizeContext';\nimport type { ColumnsType, TableProps } from 'antd/es/table';\nimport type { ExpandableConfig, TableRowSelection } from 'antd/es/table/interface';\n\n// interface DataType {\n//             gender: string;\n//             name: {\n//               title: string;\n//               first: string;\n//               last: string;\n//             };\n//             email: string;\n//             picture: {\n//               large: string;\n//               medium: string;\n//               thumbnail: string;\n//             };\n//             nat: string;\n//           }\n              interface DataType {\n        key: number;\n        name: string;\n        age: number;\n        address: string;\n        description: string;\n      }\n      \n      type TablePaginationPosition =\n        | 'topLeft'\n        | 'topCenter'\n        | 'topRight'\n        | 'bottomLeft'\n        | 'bottomCenter'\n        | 'bottomRight';\n      \n      const columns: ColumnsType<DataType> = [\n        {\n          title: 'Name',\n          dataIndex: 'name',\n        },\n        {\n          title: 'Age',\n          dataIndex: 'age',\n          sorter: (a, b) => a.age - b.age,\n        },\n        {\n          title: 'Address',\n          dataIndex: 'address',\n          filters: [\n            {\n              text: 'London',\n              value: 'London',\n            },\n            {\n              text: 'New York',\n              value: 'New York',\n            },\n          ],\n          onFilter: (value, record) => record.address.indexOf(value as string) === 0,\n        },\n        {\n          title: 'Action',\n          key: 'action',\n          sorter: true,\n          render: () => (\n            <Space size=\"middle\">\n              <a>Delete</a>\n              <a>\n                <Space>\n                  More actions\n                  <DownOutlined />\n                </Space>\n              </a>\n            </Space>\n          ),\n        },\n      ];\n      \n      const data: DataType[] = [];\n      for (let i = 1; i <= 10; i++) {\n        data.push({\n          key: i,\n          name: 'John Brown',\n          age: Number(`${i}2`),\n          address: `New York No. ${i} Lake Park`,\n          description: `My name is John Brown, I am ${i}2 years old, living in New York No. ${i} Lake Park.`,\n        });\n      }\n      \n      const defaultExpandable = { expandedRowRender: (record: DataType) => <p>{record.description}</p> };\n      const defaultTitle = () => 'Here is title';\n      const defaultFooter = () => 'Here is footer';\nconst TodoList = () => {        \n        const [bordered, setBordered] = useState(false);\n        const [loading, setLoading] = useState(false);\n        const [size, setSize] = useState<SizeType>('large');\n        const [expandable, setExpandable] = useState<ExpandableConfig<DataType> | undefined>(\n          defaultExpandable,\n        );\n        const [showTitle, setShowTitle] = useState(false);\n        const [showHeader, setShowHeader] = useState(true);\n        const [showfooter, setShowFooter] = useState(true);\n        const [rowSelection, setRowSelection] = useState<TableRowSelection<DataType> | undefined>({});\n        const [hasData, setHasData] = useState(true);\n        const [tableLayout, setTableLayout] = useState();\n        const [top, setTop] = useState<TablePaginationPosition | 'none'>('none');\n        const [bottom, setBottom] = useState<TablePaginationPosition>('bottomRight');\n        const [ellipsis, setEllipsis] = useState(false);\n        const [yScroll, setYScroll] = useState(false);\n        const [xScroll, setXScroll] = useState<string>();\n      \n       \n      \n        const scroll: { x?: number | string; y?: number | string } = {};\n        if (yScroll) {\n          scroll.y = 240;\n        }\n        if (xScroll) {\n          scroll.x = '100vw';\n        }\n      \n        const tableColumns = columns.map((item) => ({ ...item, ellipsis }));\n        if (xScroll === 'fixed') {\n          tableColumns[0].fixed = true;\n          tableColumns[tableColumns.length - 1].fixed = 'right';\n        }\n      \n        \n      \n        return (\n          <>\n            <Table\n                 bordered\n                 loading\n                 size='middle'\n                 showHeader\n              pagination={{ position: [top as TablePaginationPosition, bottom] }}\n              columns={tableColumns}\n              dataSource={hasData ? data : []}\n              scroll={scroll}\n            />\n          </>\n        );\n      };\n      \n        //     const [loading, setLoading] = useState(false);\n        //     const [data, setData] = useState<DataType[]>([]);\n          \n        //     const loadMoreData = () => {\n        //       if (loading) {\n        //         return;\n        //       }\n        //       setLoading(true);\n        //       fetch('https://randomuser.me/api/?results=10&inc=name,gender,email,nat,picture&noinfo')\n        //         .then((res) => res.json())\n        //         .then((body) => {\n        //           setData([...data, ...body.results]);\n        //           setLoading(false);\n        //         })\n        //         .catch(() => {\n        //           setLoading(false);\n        //         });\n        //     };\n          \n        //     useEffect(() => {\n        //       loadMoreData();\n        //     }, []);\n          \n        //     return (\n        //       <div\n        //         id=\"scrollableDiv\"\n        //         style={{\n        //           height: 400,\n        //           overflow: 'auto',\n        //           padding: '0 16px',\n        //           border: '1px solid rgba(140, 140, 140, 0.35)',\n        //         }}\n        //       >\n        //         <InfiniteScroll\n        //           dataLength={data.length}\n        //           next={loadMoreData}\n        //           hasMore={data.length < 50}\n        //           loader={<Skeleton avatar paragraph={{ rows: 1 }} active />}\n        //           endMessage={<Divider plain>It is all, nothing more ü§ê</Divider>}\n        //           scrollableTarget=\"scrollableDiv\"\n        //         >\n        //           <List\n        //             dataSource={data}\n        //             renderItem={(item) => (\n        //               <List.Item key={item.email}>\n        //                 <List.Item.Meta\n        //                   avatar={<Avatar src={item.picture.large} />}\n        //                   title={<a href=\"https://ant.design\">{item.name.last}</a>}\n        //                   description={item.email}\n        //                 />\n        //                 <div>Content</div>\n        //               </List.Item>\n        //             )}\n        //           />\n        //         </InfiniteScroll>\n        //       </div>\n        //     );\n        //   };\n          \nexport default TodoList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}