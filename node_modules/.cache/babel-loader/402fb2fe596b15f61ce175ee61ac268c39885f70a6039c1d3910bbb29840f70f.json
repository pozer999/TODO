{"ast":null,"code":"var _jsxFileName = \"/home/pozer/react/TODO/todo/src/features/TodoNavbar/ui/TodoNavbar.tsx\",\n  _s = $RefreshSig$();\nimport Search from \"antd/es/input/Search\";\nimport { InputPanelActions } from \"features/InputPanel/InputPanelSlice\";\nimport { nanoid } from \"nanoid\";\nimport \"./TodoNavbar.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { wrapperMessage } from \"shared/helpers/messages/useMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TodoNavbar = () => {\n  _s();\n  const dispatch = useDispatch();\n  const onSearch = title => {\n    if (title.length > 0) {\n      let id = nanoid();\n      let checked = false;\n      dispatch(InputPanelActions.changeInputValue({\n        id,\n        title,\n        checked\n      }));\n    } else {\n      wrapperMessage(\"Пожалуйста, введите название задачи\");\n    }\n  };\n  const searchValue = useSelector(state => state.inputPanel.inputValue);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Search\n    // value={searchValue}\n    , {\n      size: \"large\",\n      placeholder: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443...\",\n      onSearch: (e, u) => onSearch(e),\n      enterButton: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(TodoNavbar, \"LG/xt/CUJuEI89DC2ELjTEM+ErA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = TodoNavbar;\nexport default TodoNavbar;\nvar _c;\n$RefreshReg$(_c, \"TodoNavbar\");","map":{"version":3,"names":["Search","InputPanelActions","nanoid","useDispatch","useSelector","wrapperMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","TodoNavbar","_s","dispatch","onSearch","title","length","id","checked","changeInputValue","searchValue","state","inputPanel","inputValue","children","className","fileName","_jsxFileName","lineNumber","columnNumber","size","placeholder","e","u","enterButton","_c","$RefreshReg$"],"sources":["/home/pozer/react/TODO/todo/src/features/TodoNavbar/ui/TodoNavbar.tsx"],"sourcesContent":["import Search, { SearchProps } from \"antd/es/input/Search\";\nimport { AppDispatch, RootState } from \"app/store\";\nimport { InputPanelActions } from \"features/InputPanel/InputPanelSlice\";\nimport { nanoid } from \"nanoid\";\nimport \"./TodoNavbar.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { wrapperMessage } from \"shared/helpers/messages/useMessage\";\n\nconst TodoNavbar = () => {\n    const dispatch = useDispatch<AppDispatch>();\n    const onSearch: SearchProps[\"onSearch\"] = (title) => {\n        if (title.length > 0) {\n            let id = nanoid();\n            let checked = false;\n            dispatch(\n                InputPanelActions.changeInputValue({ id, title, checked })\n            );\n        } else {\n            wrapperMessage(\"Пожалуйста, введите название задачи\");\n        }\n    };\n    const searchValue = useSelector((state: RootState) => state.inputPanel.inputValue);\n    return (\n        <>\n            <div className=\"text-container\">\n                <h1>Todo</h1>\n            </div>\n            <Search\n                // value={searchValue}\n                size=\"large\"\n                placeholder=\"Добавить задачу...\"\n                onSearch={(e, u) => onSearch(e)}\n                enterButton\n            />\n        </>\n    );\n};\n\nexport default TodoNavbar;\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAuB,sBAAsB;AAE1D,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAO,mBAAmB;AAC1B,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,cAAc,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEpE,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGT,WAAW,CAAc,CAAC;EAC3C,MAAMU,QAAiC,GAAIC,KAAK,IAAK;IACjD,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MAClB,IAAIC,EAAE,GAAGd,MAAM,CAAC,CAAC;MACjB,IAAIe,OAAO,GAAG,KAAK;MACnBL,QAAQ,CACJX,iBAAiB,CAACiB,gBAAgB,CAAC;QAAEF,EAAE;QAAEF,KAAK;QAAEG;MAAQ,CAAC,CAC7D,CAAC;IACL,CAAC,MAAM;MACHZ,cAAc,CAAC,qCAAqC,CAAC;IACzD;EACJ,CAAC;EACD,MAAMc,WAAW,GAAGf,WAAW,CAAEgB,KAAgB,IAAKA,KAAK,CAACC,UAAU,CAACC,UAAU,CAAC;EAClF,oBACIf,OAAA,CAAAE,SAAA;IAAAc,QAAA,gBACIhB,OAAA;MAAKiB,SAAS,EAAC,gBAAgB;MAAAD,QAAA,eAC3BhB,OAAA;QAAAgB,QAAA,EAAI;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,eACNrB,OAAA,CAACP;IACG;IAAA;MACA6B,IAAI,EAAC,OAAO;MACZC,WAAW,EAAC,0FAAoB;MAChCjB,QAAQ,EAAEA,CAACkB,CAAC,EAAEC,CAAC,KAAKnB,QAAQ,CAACkB,CAAC,CAAE;MAChCE,WAAW;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC;EAAA,eACJ,CAAC;AAEX,CAAC;AAACjB,EAAA,CA5BID,UAAU;EAAA,QACKP,WAAW,EAYRC,WAAW;AAAA;AAAA8B,EAAA,GAb7BxB,UAAU;AA8BhB,eAAeA,UAAU;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}